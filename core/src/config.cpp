/**
 * This file is auto-generated by core/tools/update_config.py
 * 
 * DO NOT EDIT!!!
 * 
 * If something is wrong, please fix it in core/tools/templates/update_config/config.cpp.in first
 */

#include"core/config.h"
#include"core/build_cfgs.h"
#include"mini.h"

#include<shlobj.h>
#include<windows.h>

namespace core = rena::et::core;
namespace fs = std::filesystem;

core::config::config(){
    this -> BCFG_VERSION_MAJOR = BUILD_CFG_VERSION_MAJOR;
    this -> BCFG_VERSION_MINOR = BUILD_CFG_VERSION_MINOR;
    this -> BCFG_VERSION_PATCH = BUILD_CFG_VERSION_PATCH;
    this -> BCFG_VERSION = BUILD_CFG_VERSION;
    this -> BCFG_COMPILER_ID = BUILD_CFG_COMPILER_ID;
    this -> BCFG_COMPILER_VERSION = BUILD_CFG_COMPILER_VERSION;
    this -> BCFG_BUILD_SYS_NAME = BUILD_CFG_BUILD_SYS_NAME;
    this -> BCFG_BUILD_GIT_COMMIT = BUILD_CFG_BUILD_GIT_COMMIT;
    this -> BCFG_BUILD_GIT_BRANCH = BUILD_CFG_BUILD_GIT_BRANCH;
    this -> BCFG_BUILD_TIME = BUILD_CFG_BUILD_TIME;

    fs::path cfg_path = this -> _get_cfg_folder();
    if ( !fs::exists( cfg_path ) )
    {
        fs::create_directories( cfg_path );
    } // cfg folder doesn't exist
    cfg_path /= "config.ini";
    if ( !fs::exists( cfg_path ) )
    {
        this -> reset_to_default_cfg();
        if ( !( this -> _write_default_cfg( cfg_path ) ) )
        {
            throw config_exception( ERR_CONFIG_CFGFILE_CREATE_FAILED , "failed to create config" );
        }
    } // cfg doesn't exist
    else
    {
        this -> _read_cfg( cfg_path );
    }
}

void core::config::reset_to_default_cfg(){
    this -> DEFAULT_ENABLE_BALANCE = false;
    this -> ENABLE_LOG = true;
    this -> DEFAULT_CURRENCY_EXCHANGE_API = "ExchangeRate_API_OAE";
    this -> MIN_LOG_SEVERITY = 1;
    this -> REFRESH_FREQUENCY = 20;
    return;
}

unsigned short core::config::BCFG_VERSION_MAJOR;
unsigned short core::config::BCFG_VERSION_MINOR;
unsigned short core::config::BCFG_VERSION_PATCH;
const char* core::config::BCFG_VERSION;
const char* core::config::BCFG_COMPILER_ID;
const char* core::config::BCFG_COMPILER_VERSION;
const char* core::config::BCFG_BUILD_SYS_NAME;
const char* core::config::BCFG_BUILD_GIT_COMMIT;
const char* core::config::BCFG_BUILD_GIT_BRANCH;
const char* core::config::BCFG_BUILD_TIME;

bool core::config::DEFAULT_ENABLE_BALANCE;
bool core::config::ENABLE_LOG;
const char* core::config::DEFAULT_CURRENCY_EXCHANGE_API;
int core::config::MIN_LOG_SEVERITY;
int core::config::REFRESH_FREQUENCY;

void core::config::_read_cfg( fs::path& __p_path ){
    mINI::INIFile inif( __p_path );
    mINI::INIStructure ini;
    if ( !inif.read( ini ) )
    {
        throw config_exception( ERR_CONFIG_CFGFILE_READ_FAILED , "failed to read config" );
    }
    if ( !ini.has( "expensetracker" ) )
    {
        throw config_exception( ERR_CONFIG_CFGFILE_FORMAT_ERROR , "config file doesn't have section \"expensetracker\"" );
    }
    if ( !ini["expensetracker"].has( "default_enable_balance" ) )
    {
        throw config_exception( ERR_CONFIG_CFGFILE_FORMAT_ERROR , "config file section \"expensetracker\" doesn't have node \"default_enable_balance\"" );
    }
    this -> DEFAULT_ENABLE_BALANCE = ini["expensetracker"]["default_enable_balance"] != "0";
    if ( !ini["expensetracker"].has( "enable_log" ) )
    {
        throw config_exception( ERR_CONFIG_CFGFILE_FORMAT_ERROR , "config file section \"expensetracker\" doesn't have node \"enable_log\"" );
    }
    this -> ENABLE_LOG = ini["expensetracker"]["enable_log"] != "0";
    if ( !ini["expensetracker"].has( "default_currency_exchange_api" ) )
    {
        throw config_exception( ERR_CONFIG_CFGFILE_FORMAT_ERROR , "config file section \"expensetracker\" doesn't have node \"default_currency_exchange_api\"" );
    }
    this -> DEFAULT_CURRENCY_EXCHANGE_API = ini["expensetracker"]["default_currency_exchange_api"].c_str();
    if ( !ini.has( "g3log" ) )
    {
        throw config_exception( ERR_CONFIG_CFGFILE_FORMAT_ERROR , "config file doesn't have section \"g3log\"" );
    }
    if ( !ini["g3log"].has( "min_log_severity" ) )
    {
        throw config_exception( ERR_CONFIG_CFGFILE_FORMAT_ERROR , "config file section \"g3log\" doesn't have node \"min_log_severity\"" );
    }
    try {
        this -> MIN_LOG_SEVERITY = std::stoi( ini["g3log"]["min_log_severity"] );
    }
    catch ( ... )
    {
        this -> MIN_LOG_SEVERITY = 1;
    }
    if ( !ini["g3log"].has( "refresh_frequency" ) )
    {
        throw config_exception( ERR_CONFIG_CFGFILE_FORMAT_ERROR , "config file section \"g3log\" doesn't have node \"refresh_frequency\"" );
    }
    try {
        this -> REFRESH_FREQUENCY = std::stoi( ini["g3log"]["refresh_frequency"] );
    }
    catch ( ... )
    {
        this -> REFRESH_FREQUENCY = 20;
    }
    return;
}

bool core::config::_write_default_cfg( fs::path& __p_path ){
    mINI::INIFile inif( __p_path );
    mINI::INIStructure ini;
    ini["expensetracker"]["default_enable_balance"] = "0";
    ini["expensetracker"]["enable_log"] = "1";
    ini["expensetracker"]["default_currency_exchange_api"] = "ExchangeRate_API_OAE";
    ini["g3log"]["min_log_severity"] = "1";
    ini["g3log"]["refresh_frequency"] = "20";
    return inif.generate( ini );
}

fs::path core::config::_get_cfg_folder(){
    TCHAR buf[MAX_PATH];
    SHGetSpecialFolderPath( NULL , buf , CSIDL_LOCAL_APPDATA , false );
    fs::path cfg_folder( buf );
    cfg_folder /= "ExpenseTracker";
    cfg_folder /= "cfg";
    return cfg_folder;
}
